<canvas id="robot" class="h-screen w-screen pointer-events-none fixed top-0 left-0 right-0" />
<script>
    import { HEXA_WHITE, createBaseScene, ghostingShader, loadScene } from "../../../assets/scripts/threeUtils.ts";
    import { Color } from "three";
    import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';
    import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
    import WebGL from 'three/examples/jsm/capabilities/WebGL.js';

    const MODEL_PATH = "/portfolio/models/robot/character";
    const canvas = document.getElementById("robot");
    const color = new Color(HEXA_WHITE);
    const loader = new FBXLoader();

    const POS = {
        x: 0,
        y: -30,
        z: -500
    };

	if(WebGL.isWebGLAvailable() && canvas) {
        const qualiaDetails = document.getElementById("qualia-details");
        const qualiaDescription = document.getElementById("qualia-description");
		const { scene, animate, mixer, composer } = createBaseScene({ canvas, color });

        composer.addPass(new ShaderPass(ghostingShader));

		const onAnimate = () => {
			animate();
			window.requestAnimationFrame(onAnimate);
		};

		// const handleRemoveEventListeners = () => {
		// 	cancelAnimationFrame(animationFrame);
		// 	killScene();
		// };

        loadScene({ color, loader, path: `${MODEL_PATH}@run.fbx` })
            .then(async (robot) => {
                const walkingRobot = await loadScene({ color, loader, path: `${MODEL_PATH}@walk.fbx` });
                const runningRobot = await loadScene({ color, loader, path: `${MODEL_PATH}@run.fbx` });

                robot.animations.push(walkingRobot.animations[0]);
                robot.animations.push(runningRobot.animations[0]);
                robot.position.set(POS.x, POS.y, POS.z);

                return robot;
            })
            .then((robot) => {
                scene.add(robot);
                mixer.clipAction(robot.animations[0]).play();

                const MAX_ROTATION = 1;
                const ROTATION_STEPS = MAX_ROTATION / qualiaDescription.offsetTop;
                const ROTATION_DIR = -1;

                const rotateOnScroll = () => {
                    const scrollTop = qualiaDetails.scrollTop;
                    const rotation = Math.min(scrollTop * ROTATION_STEPS, MAX_ROTATION) * ROTATION_DIR;

                    robot.rotation.y = rotation;
                    robot.position.set(rotation * -40, POS.y, POS.z);
                };

                const moveOnScroll = () => {
                    if(qualiaDetails.scrollTop < qualiaDescription.offsetTop) {
                        rotateOnScroll();
                    }
                };

                qualiaDetails.addEventListener("scroll", moveOnScroll);
            });

		onAnimate();
	}

</script>